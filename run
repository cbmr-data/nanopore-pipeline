#!/usr/bin/env python3
# -*- coding: utf8 -*-
# pyright: strict
import argparse
import os
import shlex
import subprocess
import sys
from pathlib import Path
from typing import Any, List, NoReturn, TextIO, Union


def eprint(*args: Any, file: TextIO = sys.stderr, **kwargs: Any):
    print(*args, file=file, **kwargs)


def abort(*args: Any, **kwargs: Any) -> NoReturn:
    eprint("ERROR:", *args, **kwargs)
    sys.exit(1)


def quote(value: Union[str, Path]) -> str:
    return shlex.quote(str(value))


class HelpFormatter(argparse.ArgumentDefaultsHelpFormatter):
    def __init__(self, *args: Any, **kwargs: Any) -> None:
        kwargs.setdefault("width", 79)

        super().__init__(*args, **kwargs)


def parse_args(argv: List[str]) -> argparse.Namespace:
    parser = argparse.ArgumentParser(formatter_class=HelpFormatter)
    parser.add_argument("batch")
    parser.add_argument("args", nargs="*")
    parser.add_argument(
        "--batches",
        type=Path,
        default=Path("batches"),
    )
    parser.add_argument(
        "--default-model",
        type=Path,
        default=Path("batches/default_model"),
    )
    parser.add_argument(
        "--profile",
        type=Path,
        default=Path("profile"),
    )
    parser.add_argument(
        "--results",
        type=Path,
        default=Path("results"),
    )

    return parser.parse_args(argv)


def main(argv: List[str]) -> int:
    args = parse_args(argv)

    default_model: Path = args.default_model
    batch: Path = args.batches / args.batch
    model: Path = args.batches / (args.batch + ".model")
    profile: Path = args.profile

    if not os.path.lexists(batch):
        abort(f"no batch directory at {quote(batch)}")
    elif not batch.is_dir():
        abort(f"invalid batch directory at {quote(batch)}")

    if not os.path.lexists(model):
        eprint("Using default model")
        model = default_model

    if not model.is_dir():
        abort(f"invalid model directory at {quote(model)}")

    if not profile.is_dir():
        abort(f"invalid profile directory at {quote(profile)}")

    if model.is_symlink():
        model = model.resolve()
        eprint("Using model at", model)

    command: List[Union[str, Path]] = [
        "snakemake",
        "--profile",
        profile,
        "--config",
        f"input_dir={batch}",
        f"results_dir={args.results}",
        f"dorado_model={model}",
    ]
    command.extend(args.args)

    eprint("Command =", " ".join(quote(it) for it in command))
    return subprocess.call(
        command,
        stdin=subprocess.DEVNULL,
    )


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
